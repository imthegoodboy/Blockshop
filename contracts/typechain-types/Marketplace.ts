/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "computeId"
      | "feeRecipient"
      | "getProduct"
      | "hasBuyerAccess"
      | "listProduct"
      | "platformFeeBps"
      | "purchase"
      | "setPlatformParams"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProductListed" | "ProductPurchased"
  ): EventFragment;

  encodeFunctionData(functionFragment: "computeId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getProduct", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasBuyerAccess",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listProduct",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "purchase", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPlatformParams",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "computeId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasBuyerAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformParams",
    data: BytesLike
  ): Result;
}

export namespace ProductListedEvent {
  export type InputTuple = [
    id: BytesLike,
    seller: AddressLike,
    priceWei: BigNumberish,
    ipfsCid: string
  ];
  export type OutputTuple = [
    id: string,
    seller: string,
    priceWei: bigint,
    ipfsCid: string
  ];
  export interface OutputObject {
    id: string;
    seller: string;
    priceWei: bigint;
    ipfsCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductPurchasedEvent {
  export type InputTuple = [
    id: BytesLike,
    buyer: AddressLike,
    priceWei: BigNumberish,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    buyer: string,
    priceWei: bigint,
    feeAmount: bigint
  ];
  export interface OutputObject {
    id: string;
    buyer: string;
    priceWei: bigint;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  computeId: TypedContractMethod<[ipfsCid: string], [string], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getProduct: TypedContractMethod<
    [ipfsCid: string],
    [
      [string, bigint, boolean] & {
        seller: string;
        priceWei: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  hasBuyerAccess: TypedContractMethod<
    [buyer: AddressLike, ipfsCid: string],
    [boolean],
    "view"
  >;

  listProduct: TypedContractMethod<
    [ipfsCid: string, priceWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  purchase: TypedContractMethod<[ipfsCid: string], [void], "payable">;

  setPlatformParams: TypedContractMethod<
    [_platformFeeBps: BigNumberish, _feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "computeId"
  ): TypedContractMethod<[ipfsCid: string], [string], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [ipfsCid: string],
    [
      [string, bigint, boolean] & {
        seller: string;
        priceWei: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasBuyerAccess"
  ): TypedContractMethod<
    [buyer: AddressLike, ipfsCid: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "listProduct"
  ): TypedContractMethod<
    [ipfsCid: string, priceWei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchase"
  ): TypedContractMethod<[ipfsCid: string], [void], "payable">;
  getFunction(
    nameOrSignature: "setPlatformParams"
  ): TypedContractMethod<
    [_platformFeeBps: BigNumberish, _feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProductListed"
  ): TypedContractEvent<
    ProductListedEvent.InputTuple,
    ProductListedEvent.OutputTuple,
    ProductListedEvent.OutputObject
  >;
  getEvent(
    key: "ProductPurchased"
  ): TypedContractEvent<
    ProductPurchasedEvent.InputTuple,
    ProductPurchasedEvent.OutputTuple,
    ProductPurchasedEvent.OutputObject
  >;

  filters: {
    "ProductListed(bytes32,address,uint256,string)": TypedContractEvent<
      ProductListedEvent.InputTuple,
      ProductListedEvent.OutputTuple,
      ProductListedEvent.OutputObject
    >;
    ProductListed: TypedContractEvent<
      ProductListedEvent.InputTuple,
      ProductListedEvent.OutputTuple,
      ProductListedEvent.OutputObject
    >;

    "ProductPurchased(bytes32,address,uint256,uint256)": TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;
    ProductPurchased: TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;
  };
}
